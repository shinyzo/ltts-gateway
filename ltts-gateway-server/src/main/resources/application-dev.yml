server:
  port: 1111

spring:
  redis:  # 采用redis 令牌桶算法 使用
    host: 192.168.0.127
    port: 6378
    password: xjj87654321HN
  main:
    allow-bean-definition-overriding: true  # Bean重名覆盖
  application:
    name: ltts-gateway-server
  cloud:
    gateway:
      discovery:
        locator:
          lowerCaseServiceId: true
          enabled: true
      routes:
        - id: ltts-order
          uri: lb://ltts-order           # lb loadbalance 采用负载均衡算法
          predicates:
            - Path=/order-service/**      # 请求的路径匹配则会转发到uri
          filters:
            - Authentication=/*           # 自定义拦截器
            - StripPrefix=1               # 移除path中的第一个路径order-service
            - name: RequestRateLimiter   # 限流
              args:
                deny-empty-key: true
                keyResolver: '#{@ipKeyResolver}'
                redis-rate-limiter.replenishRate: 1  # 每秒补充10个
                redis-rate-limiter.burstCapacity: 20 # 突发20个
                redis-rate-limiter.requestedTokens: 1 # 每次请求消耗1个
      default-filters:  # 默认过滤器，熔断Hystrix
      - name: Hystrix
        args:
          name : default
          fallbackUri: 'forward:/defaultFallback'



# 暴露监控端点
management:
  endpoints:
    web:
      exposure:
        include: "*"

# 拦截的请求ip地址
blackIpList: "198.*"

##动态路由配置开关，开启则从配置中心获取，否者读取本地的配置
gateway:
  dynamic:
    route:
      enabled: false


#负载均衡请求处理的超时时间
ribbon:
  ReadTimeout: 10000
  ConnectTimeout: 10000

# Hystrix 断路器 2s超时，超时请求策略
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: 5000
























